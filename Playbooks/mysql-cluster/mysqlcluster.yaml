---
## Playbook for creating mysql cluster
- name: mysql docker cluster
  # i tried to get etcd bare metal and docker to work with tls certs but couldnt figure out how>
  # so here we are with mysql lmao
  hosts: [etcds]
  tasks:
    - name: Print all available facts (as deliberate gathering to prevent undefined errors late>
      ansible.builtin.debug:
        var: ansible_facts
    - name: create docker network
      shell: "docker network create -d overlay mysqlcluster --subnet 172.27.17.0/16"
      when: ansible_default_ipv4.address == "192.168.3.22"
    - name: install docker python libraries
      shell: "pip3 install docker requests"
      environment:
        ansible_python_interpreter: "/usr/bin/python3"
    - name: setup cluster manager
      community.docker.docker_container:
        name: management1
        image: "mysql/mysql-cluster"
        command: ["ndbd"]
        detach: yes
        networks:
        - name: "mysqlcluster"
          ipv4_address: "172.27.17.2"
      when: ansible_default_ipv4.address == "192.168.3.22"
    - name: setup first data node
      community.docker.docker_container:
        name: ndb1
        image: "mysql/mysql-cluster"
        command: ["ndbd"]
        detach: yes
        networks:
        - name: "mysqlcluster"
          ipv4_address: "172.27.17.3"
      when: ansible_default_ipv4.address == "192.168.3.23"
    - name: setup second data node
      community.docker.docker_container:
        name: ndb2
        image: "mysql/mysql-cluster"
        command: ["ndbd"]
        detach: yes
        networks:
        - name: "mysqlcluster"
          ipv4_address: "172.27.17.4"
      when: ansible_default_ipv4.address == "192.168.3.24"
    - name: setup server container
      community.docker.docker_container:
        name: mysql1
        image: "mysql/mysql-cluster"
        command: ["mysqld"]
        detach: yes
        env:
            MYSQL_RANDOM_ROOT_PASSWORD: "true"
        networks:
        - name: "mysqlcluster"
          ipv4_address: "172.27.17.5"
      when: ansible_default_ipv4.address == "192.168.3.22"
    - name: wait for arbitrary amount of time instead of dynamically responding to listening se>
      wait_for:
        delay: 90
        timeout: 0
    - name: test by pulling default root password
      when: ansible_default_ipv4.address == "192.168.3.22"
      shell: "docker logs mysql1 2>&1 | grep PASSWORD"
...
